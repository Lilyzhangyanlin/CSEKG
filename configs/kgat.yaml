
# dataset config : Knowledge-based Recommendation
USER_ID_FIELD: user_id
ITEM_ID_FIELD: item_id
HEAD_ENTITY_ID_FIELD: head_id
TAIL_ENTITY_ID_FIELD: tail_id
RELATION_ID_FIELD: relation_id
ENTITY_ID_FIELD: entity_id
load_col:
    inter: [user_id, item_id]
    kg: [head_id, relation_id, tail_id]
    link: [item_id, entity_id]
# benchmark_filename: ['train', 'valid', 'test']


# Training and evaluation config
epochs: 1000 #训练的最大轮数
train_batch_size: 2048 #训练的batch_size
eval_batch_size: 4096
learner: adam     #使用的pytorch内置优化器
learning_rate: 0.0001 #学习率
# training_neg_sample_num: 1 #负采样数目
eval_step: 1      #每次训练后做evalaution的次数
stopping_step: 30 #控制训练收敛的步骤数，在该步骤数内若选取的评测标准没有什么变化，就可以提前停止了

# eval_setting: RO_RS,full #对数据随机重排，按比例划分数据集，并使用全排序
eval_args:
   split: {'RS': [0.8, 0.1, 0.1]}
   group_by: user
   order: RO
   mode: full
metrics: ['Recall', 'MRR', 'NDCG', 'Hit', 'Precision']
topk: [20]
valid_metric: Recall@20

train_batch_size: 8192
eval_batch_size: 40960

# ==================== model config
embedding_size: 64              # (int) The embedding size of users, items and entities.
kg_embedding_size: 64           # (int) The embedding size of relations in knowledge graph.
layers: [64]                    # (list of int) The hidden size in GNN layers.
mess_dropout: 0.1               # (float) The message dropout rate in GNN layer.
reg_weight: 1e-5                # (float) The L2 regularization weight.
aggregator_type: 'bi'           # (str) The aggregator type used in GNN. Range in ['gcn', 'graphsage', 'bi'].

# ======= CLS
n_clusters: 4
cls_mode: pretrained
cls_emb_model: ENMF
