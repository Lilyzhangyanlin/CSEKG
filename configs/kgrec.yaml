
# recbole/properties/overall.yaml


# from SSLRec

# dataset config : Knowledge-based Recommendation
USER_ID_FIELD: user_id
ITEM_ID_FIELD: item_id
HEAD_ENTITY_ID_FIELD: head_id
TAIL_ENTITY_ID_FIELD: tail_id
RELATION_ID_FIELD: relation_id
ENTITY_ID_FIELD: entity_id
load_col:
    inter: [user_id, item_id]
    kg: [head_id, relation_id, tail_id]
    link: [item_id, entity_id]
# benchmark_filename: ['train', 'valid', 'test']


# Training and evaluation config
epochs: 100 #训练的最大轮数
train_batch_size: 1024 #训练的batch_size
eval_batch_size: 4096
learner: adam     #使用的pytorch内置优化器
learning_rate: 0.001 #学习率
# training_neg_sample_num: 1 #负采样数目
eval_step: 1      #每次训练后做evalaution的次数
stopping_step: 30 #控制训练收敛的步骤数，在该步骤数内若选取的评测标准没有什么变化，就可以提前停止了

# eval_setting: RO_RS,full #对数据随机重排，按比例划分数据集，并使用全排序
eval_args:
   split: {'RS': [0.8, 0.1, 0.1]}
   group_by: user
   order: RO
   mode: full
metrics: ['Recall', 'MRR', 'NDCG', 'Hit', 'Precision']
topk: [20]
valid_metric: Recall@20

# envronment
# gpu_id: 0
# log_wandb: True



# quck_start_config/knowledge_base.yaml
# Data preprocessing for knowledge graph triples
kg_reverse_r: False                     # (bool) Whether to reverse relations of triples for bidirectional edges.
entity_kg_num_interval: "[0,inf)"       # (str) Entity interval for filtering kg.
relation_kg_num_interval: "[0,inf)"     # (str) Relation interval for filtering kg.


layer_num: 2
decay_weight: 1.0e-5
embedding_size: 64
node_dropout: true
node_dropout_rate: 0.5
mess_dropout: true
mess_dropout_rate: 0.1

mae_coef: 0.1
mae_msize: 256
cl_coef: 0.001
tau: 0.2
cl_drop_ratio: 0.5
samp_func: torch

devide: cuda

# ===== DATA
data_path: dataset/
# dataset: ml-1m
# save_dataset: True
# dataset_save_path: 

# =========== DIR
checkpoint_dir: saved/
